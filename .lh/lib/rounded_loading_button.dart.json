{
    "sourceFile": "lib/rounded_loading_button.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 9,
            "patches": [
                {
                    "date": 1719230530675,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1719230541184,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -203,9 +203,9 @@\n       padding: const EdgeInsets.all(0),\r\n       child: ElevatedButton(\r\n         style: ElevatedButton.styleFrom(\r\n           surfaceTintColor: Colors.white,\r\n-        //   onSurface: widget.disabledColor,\r\n+          onSurface: widget.disabledColor,\r\n           minimumSize: Size(_squeezeAnimation.value, widget.height),\r\n           shape: widget.borderColor == null\r\n               ? RoundedRectangleBorder(\r\n                   borderRadius: BorderRadius.circular(widget.borderRadius),\r\n"
                },
                {
                    "date": 1719230565362,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -203,9 +203,9 @@\n       padding: const EdgeInsets.all(0),\r\n       child: ElevatedButton(\r\n         style: ElevatedButton.styleFrom(\r\n           surfaceTintColor: Colors.white,\r\n-          onSurface: widget.disabledColor,\r\n+          visualDensity: widget.disabledColor,\r\n           minimumSize: Size(_squeezeAnimation.value, widget.height),\r\n           shape: widget.borderColor == null\r\n               ? RoundedRectangleBorder(\r\n                   borderRadius: BorderRadius.circular(widget.borderRadius),\r\n"
                },
                {
                    "date": 1719230729958,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -197,33 +197,40 @@\n       },\r\n     );\r\n \r\n     final _btn = ButtonTheme(\r\n-      shape: RoundedRectangleBorder(borderRadius: _borderAnimation.value),\r\n-      disabledColor: widget.disabledColor,\r\n-      padding: const EdgeInsets.all(0),\r\n-      child: ElevatedButton(\r\n-        style: ElevatedButton.styleFrom(\r\n-          surfaceTintColor: Colors.white,\r\n-          visualDensity: widget.disabledColor,\r\n-          minimumSize: Size(_squeezeAnimation.value, widget.height),\r\n-          shape: widget.borderColor == null\r\n-              ? RoundedRectangleBorder(\r\n-                  borderRadius: BorderRadius.circular(widget.borderRadius),\r\n-                )\r\n-              : RoundedRectangleBorder(\r\n-                  borderRadius: BorderRadius.zero,\r\n-                  side: BorderSide(color: widget.borderColor!),\r\n-                ),\r\n-          // backgroundColor: Colors.red,\r\n-          primary: widget.color,\r\n-          elevation: widget.elevation,\r\n-          padding: const EdgeInsets.all(0),\r\n-        ),\r\n-        onPressed: widget.onPressed == null ? null : _btnPressed,\r\n-        child: childStream,\r\n-      ),\r\n-    );\r\n+        shape: RoundedRectangleBorder(borderRadius: _borderAnimation.value),\r\n+        disabledColor: widget.disabledColor,\r\n+        padding: const EdgeInsets.all(0),\r\n+        child: ElevatedButton(\r\n+          style: ButtonStyle(\r\n+            minimumSize: MaterialStateProperty.all<Size>(\r\n+                Size(_squeezeAnimation.value, widget.height)),\r\n+            shape: MaterialStateProperty.all<OutlinedBorder>(\r\n+              widget.borderColor == null\r\n+                  ? RoundedRectangleBorder(\r\n+                      borderRadius: BorderRadius.circular(widget.borderRadius),\r\n+                    )\r\n+                  : RoundedRectangleBorder(\r\n+                      borderRadius: BorderRadius.zero,\r\n+                      side: BorderSide(color: widget.borderColor!),\r\n+                    ),\r\n+            ),\r\n+            backgroundColor: MaterialStateProperty.resolveWith<Color>(\r\n+              (Set<MaterialState> states) {\r\n+                if (states.contains(MaterialState.disabled)) {\r\n+                  return widget.disabledColor;\r\n+                }\r\n+                return widget.color; // Use the default background color\r\n+              },\r\n+            ),\r\n+            elevation: MaterialStateProperty.all<double>(widget.elevation),\r\n+            padding:\r\n+                MaterialStateProperty.all<EdgeInsets>(const EdgeInsets.all(0)),\r\n+          ),\r\n+          onPressed: widget.onPressed == null ? null : _btnPressed,\r\n+          child: childStream,\r\n+        ));\r\n \r\n     return SizedBox(\r\n       height: widget.height,\r\n       child: Center(\r\n"
                },
                {
                    "date": 1719230739650,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -197,41 +197,41 @@\n       },\r\n     );\r\n \r\n     final _btn = ButtonTheme(\r\n-        shape: RoundedRectangleBorder(borderRadius: _borderAnimation.value),\r\n-        disabledColor: widget.disabledColor,\r\n-        padding: const EdgeInsets.all(0),\r\n-        child: ElevatedButton(\r\n-          style: ButtonStyle(\r\n-            minimumSize: MaterialStateProperty.all<Size>(\r\n-                Size(_squeezeAnimation.value, widget.height)),\r\n-            shape: MaterialStateProperty.all<OutlinedBorder>(\r\n-              widget.borderColor == null\r\n-                  ? RoundedRectangleBorder(\r\n-                      borderRadius: BorderRadius.circular(widget.borderRadius),\r\n-                    )\r\n-                  : RoundedRectangleBorder(\r\n-                      borderRadius: BorderRadius.zero,\r\n-                      side: BorderSide(color: widget.borderColor!),\r\n-                    ),\r\n+      shape: RoundedRectangleBorder(borderRadius: _borderAnimation.value),\r\n+      disabledColor: widget.disabledColor,\r\n+      padding: const EdgeInsets.all(0),\r\n+      child: ElevatedButton(\r\n+  style: ButtonStyle(\r\n+    minimumSize: MaterialStateProperty.all<Size>(Size(_squeezeAnimation.value, widget.height)),\r\n+    shape: MaterialStateProperty.all<OutlinedBorder>(\r\n+      widget.borderColor == null\r\n+          ? RoundedRectangleBorder(\r\n+              borderRadius: BorderRadius.circular(widget.borderRadius),\r\n+            )\r\n+          : RoundedRectangleBorder(\r\n+              borderRadius: BorderRadius.zero,\r\n+              side: BorderSide(color: widget.borderColor!),\r\n             ),\r\n-            backgroundColor: MaterialStateProperty.resolveWith<Color>(\r\n-              (Set<MaterialState> states) {\r\n-                if (states.contains(MaterialState.disabled)) {\r\n-                  return widget.disabledColor;\r\n-                }\r\n-                return widget.color; // Use the default background color\r\n-              },\r\n-            ),\r\n-            elevation: MaterialStateProperty.all<double>(widget.elevation),\r\n-            padding:\r\n-                MaterialStateProperty.all<EdgeInsets>(const EdgeInsets.all(0)),\r\n-          ),\r\n-          onPressed: widget.onPressed == null ? null : _btnPressed,\r\n-          child: childStream,\r\n-        ));\r\n+    ),\r\n+    backgroundColor: MaterialStateProperty.resolveWith<Color>(\r\n+      (Set<MaterialState> states) {\r\n+        if (states.contains(MaterialState.disabled)) {\r\n+          return widget.disabledColor;\r\n+        }\r\n+        return widget.color; // Use the default background color\r\n+      },\r\n+    ),\r\n+    elevation: MaterialStateProperty.all<double>(widget.elevation),\r\n+    padding: MaterialStateProperty.all<EdgeInsets>(const EdgeInsets.all(0)),\r\n+  ),\r\n+  onPressed: widget.onPressed == null ? null : _btnPressed,\r\n+  child: childStream,\r\n+)\r\n \r\n+    );\r\n+\r\n     return SizedBox(\r\n       height: widget.height,\r\n       child: Center(\r\n         child: _state.value == ButtonState.error\r\n"
                },
                {
                    "date": 1719230748910,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -201,35 +201,28 @@\n       shape: RoundedRectangleBorder(borderRadius: _borderAnimation.value),\r\n       disabledColor: widget.disabledColor,\r\n       padding: const EdgeInsets.all(0),\r\n       child: ElevatedButton(\r\n-  style: ButtonStyle(\r\n-    minimumSize: MaterialStateProperty.all<Size>(Size(_squeezeAnimation.value, widget.height)),\r\n-    shape: MaterialStateProperty.all<OutlinedBorder>(\r\n-      widget.borderColor == null\r\n-          ? RoundedRectangleBorder(\r\n-              borderRadius: BorderRadius.circular(widget.borderRadius),\r\n-            )\r\n-          : RoundedRectangleBorder(\r\n-              borderRadius: BorderRadius.zero,\r\n-              side: BorderSide(color: widget.borderColor!),\r\n-            ),\r\n-    ),\r\n-    backgroundColor: MaterialStateProperty.resolveWith<Color>(\r\n-      (Set<MaterialState> states) {\r\n-        if (states.contains(MaterialState.disabled)) {\r\n-          return widget.disabledColor;\r\n-        }\r\n-        return widget.color; // Use the default background color\r\n-      },\r\n-    ),\r\n-    elevation: MaterialStateProperty.all<double>(widget.elevation),\r\n-    padding: MaterialStateProperty.all<EdgeInsets>(const EdgeInsets.all(0)),\r\n-  ),\r\n-  onPressed: widget.onPressed == null ? null : _btnPressed,\r\n-  child: childStream,\r\n-)\r\n-\r\n+        style: ElevatedButton.styleFrom(\r\n+          surfaceTintColor: Colors.white,\r\n+          onSurface: widget.disabledColor,\r\n+          minimumSize: Size(_squeezeAnimation.value, widget.height),\r\n+          shape: widget.borderColor == null\r\n+              ? RoundedRectangleBorder(\r\n+                  borderRadius: BorderRadius.circular(widget.borderRadius),\r\n+                )\r\n+              : RoundedRectangleBorder(\r\n+                  borderRadius: BorderRadius.zero,\r\n+                  side: BorderSide(color: widget.borderColor!),\r\n+                ),\r\n+          // backgroundColor: Colors.red,\r\n+          primary: widget.color,\r\n+          elevation: widget.elevation,\r\n+          padding: const EdgeInsets.all(0),\r\n+        ),\r\n+        onPressed: widget.onPressed == null ? null : _btnPressed,\r\n+        child: childStream,\r\n+      ),\r\n     );\r\n \r\n     return SizedBox(\r\n       height: widget.height,\r\n"
                },
                {
                    "date": 1719230790862,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -203,9 +203,9 @@\n       padding: const EdgeInsets.all(0),\r\n       child: ElevatedButton(\r\n         style: ElevatedButton.styleFrom(\r\n           surfaceTintColor: Colors.white,\r\n-          onSurface: widget.disabledColor,\r\n+          disabledForegroundColor: widget.disabledColor,\r\n           minimumSize: Size(_squeezeAnimation.value, widget.height),\r\n           shape: widget.borderColor == null\r\n               ? RoundedRectangleBorder(\r\n                   borderRadius: BorderRadius.circular(widget.borderRadius),\r\n"
                },
                {
                    "date": 1719230826604,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -214,9 +214,9 @@\n                   borderRadius: BorderRadius.zero,\r\n                   side: BorderSide(color: widget.borderColor!),\r\n                 ),\r\n           // backgroundColor: Colors.red,\r\n-          primary: widget.color,\r\n+          : widget.color,\r\n           elevation: widget.elevation,\r\n           padding: const EdgeInsets.all(0),\r\n         ),\r\n         onPressed: widget.onPressed == null ? null : _btnPressed,\r\n"
                },
                {
                    "date": 1719230833225,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -214,9 +214,9 @@\n                   borderRadius: BorderRadius.zero,\r\n                   side: BorderSide(color: widget.borderColor!),\r\n                 ),\r\n           // backgroundColor: Colors.red,\r\n-          : widget.color,\r\n+          colo: widget.color,\r\n           elevation: widget.elevation,\r\n           padding: const EdgeInsets.all(0),\r\n         ),\r\n         onPressed: widget.onPressed == null ? null : _btnPressed,\r\n"
                },
                {
                    "date": 1719230839734,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -214,9 +214,9 @@\n                   borderRadius: BorderRadius.zero,\r\n                   side: BorderSide(color: widget.borderColor!),\r\n                 ),\r\n           // backgroundColor: Colors.red,\r\n-          colo: widget.color,\r\n+          backgroundColor: widget.color,\r\n           elevation: widget.elevation,\r\n           padding: const EdgeInsets.all(0),\r\n         ),\r\n         onPressed: widget.onPressed == null ? null : _btnPressed,\r\n"
                }
            ],
            "date": 1719230530675,
            "name": "Commit-0",
            "content": "library rounded_loading_button;\r\n\r\nimport 'dart:async';\r\n\r\nimport 'package:flutter/material.dart';\r\nimport 'package:rxdart/rxdart.dart';\r\n\r\n/// States that your button can assume via the controller\r\n// ignore: public_member_api_docs\r\nenum ButtonState { idle, loading, success, error }\r\n\r\n/// Initialize class\r\nclass RoundedLoadingButton extends StatefulWidget {\r\n  /// Button controller, now required\r\n  final RoundedLoadingButtonController controller;\r\n\r\n  /// The callback that is called when\r\n  /// the button is tapped or otherwise activated.\r\n  final VoidCallback? onPressed;\r\n\r\n  /// The button's label\r\n  final Widget child;\r\n\r\n  /// The primary color of the button\r\n  final Color? color;\r\n\r\n  /// The loader color of the button\r\n  final Color? loaderColor;\r\n\r\n  /// The vertical extent of the button.\r\n  final double height;\r\n\r\n  /// The horizontal extent of the button.\r\n  final double width;\r\n\r\n  /// The size of the CircularProgressIndicator\r\n  final double loaderSize;\r\n\r\n  /// The stroke width of the CircularProgressIndicator\r\n  final double loaderStrokeWidth;\r\n\r\n  /// Whether to trigger the animation on the tap event\r\n  final bool animateOnTap;\r\n\r\n  /// The color of the static icons\r\n  final Color valueColor;\r\n\r\n  /// reset the animation after specified duration,\r\n  /// use resetDuration parameter to set Duration, defaults to 15 seconds\r\n  final bool resetAfterDuration;\r\n\r\n  /// The curve of the shrink animation\r\n  final Curve curve;\r\n\r\n  /// The radius of the button border\r\n  final double borderRadius;\r\n\r\n  /// The color of the button border\r\n  final Color? borderColor;\r\n\r\n  /// The duration of the button animation\r\n  final Duration duration;\r\n\r\n  /// The elevation of the raised button\r\n  final double elevation;\r\n\r\n  /// Duration after which reset the button\r\n  final Duration resetDuration;\r\n\r\n  /// The color of the button when it is in the error state\r\n  final Color? errorColor;\r\n\r\n  /// The color of the button when it is in the success state\r\n  final Color? successColor;\r\n\r\n  /// The color of the button when it is disabled\r\n  final Color? disabledColor;\r\n\r\n  /// The icon for the success state\r\n  final IconData successIcon;\r\n\r\n  /// The icon for the failed state\r\n  final IconData failedIcon;\r\n\r\n  /// The success and failed animation curve\r\n  final Curve completionCurve;\r\n\r\n  /// The duration of the success and failed animation\r\n  final Duration completionDuration;\r\n\r\n  Duration get _borderDuration {\r\n    return Duration(milliseconds: (duration.inMilliseconds / 2).round());\r\n  }\r\n\r\n  /// initialize constructor\r\n  const RoundedLoadingButton({\r\n    Key? key,\r\n    required this.controller,\r\n    required this.onPressed,\r\n    required this.child,\r\n    this.color = Colors.lightBlue,\r\n    this.height = 50,\r\n    this.loaderColor,\r\n    this.borderColor,\r\n    this.width = 300,\r\n    this.loaderSize = 24.0,\r\n    this.loaderStrokeWidth = 2.0,\r\n    this.animateOnTap = true,\r\n    this.valueColor = Colors.white,\r\n    this.borderRadius = 35,\r\n    this.elevation = 2,\r\n    this.duration = const Duration(milliseconds: 500),\r\n    this.curve = Curves.easeInOutCirc,\r\n    this.errorColor = Colors.red,\r\n    this.successColor,\r\n    this.resetDuration = const Duration(seconds: 15),\r\n    this.resetAfterDuration = false,\r\n    this.successIcon = Icons.check,\r\n    this.failedIcon = Icons.close,\r\n    this.completionCurve = Curves.elasticOut,\r\n    this.completionDuration = const Duration(milliseconds: 1000),\r\n    this.disabledColor,\r\n  }) : super(key: key);\r\n\r\n  @override\r\n  State<StatefulWidget> createState() => RoundedLoadingButtonState();\r\n}\r\n\r\n/// Class implementation\r\nclass RoundedLoadingButtonState extends State<RoundedLoadingButton>\r\n    with TickerProviderStateMixin {\r\n  late AnimationController _buttonController;\r\n  late AnimationController _borderController;\r\n  late AnimationController _checkButtonController;\r\n\r\n  late Animation _squeezeAnimation;\r\n  late Animation _bounceAnimation;\r\n  late Animation _borderAnimation;\r\n\r\n  final _state = BehaviorSubject<ButtonState>.seeded(ButtonState.idle);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    final theme = Theme.of(context);\r\n\r\n    Widget _check = Container(\r\n      alignment: FractionalOffset.center,\r\n      decoration: BoxDecoration(\r\n        color: widget.successColor ?? theme.primaryColor,\r\n        borderRadius:\r\n            BorderRadius.all(Radius.circular(_bounceAnimation.value / 2)),\r\n      ),\r\n      width: _bounceAnimation.value,\r\n      height: _bounceAnimation.value,\r\n      child: _bounceAnimation.value > 20\r\n          ? Icon(\r\n              widget.successIcon,\r\n              color: widget.valueColor,\r\n            )\r\n          : null,\r\n    );\r\n\r\n    Widget _cross = Container(\r\n      alignment: FractionalOffset.center,\r\n      decoration: BoxDecoration(\r\n        color: widget.errorColor,\r\n        borderRadius:\r\n            BorderRadius.all(Radius.circular(_bounceAnimation.value / 2)),\r\n      ),\r\n      width: _bounceAnimation.value,\r\n      height: _bounceAnimation.value,\r\n      child: _bounceAnimation.value > 20\r\n          ? Icon(\r\n              widget.failedIcon,\r\n              color: widget.valueColor,\r\n            )\r\n          : null,\r\n    );\r\n\r\n    Widget _loader = SizedBox(\r\n      height: widget.loaderSize,\r\n      width: widget.loaderSize,\r\n      child: CircularProgressIndicator(\r\n        valueColor: AlwaysStoppedAnimation<Color>(\r\n            widget.loaderColor ?? widget.valueColor),\r\n        strokeWidth: widget.loaderStrokeWidth,\r\n      ),\r\n    );\r\n\r\n    Widget childStream = StreamBuilder(\r\n      stream: _state,\r\n      builder: (context, snapshot) {\r\n        return AnimatedSwitcher(\r\n          duration: const Duration(milliseconds: 200),\r\n          child: snapshot.data == ButtonState.loading ? _loader : widget.child,\r\n        );\r\n      },\r\n    );\r\n\r\n    final _btn = ButtonTheme(\r\n      shape: RoundedRectangleBorder(borderRadius: _borderAnimation.value),\r\n      disabledColor: widget.disabledColor,\r\n      padding: const EdgeInsets.all(0),\r\n      child: ElevatedButton(\r\n        style: ElevatedButton.styleFrom(\r\n          surfaceTintColor: Colors.white,\r\n        //   onSurface: widget.disabledColor,\r\n          minimumSize: Size(_squeezeAnimation.value, widget.height),\r\n          shape: widget.borderColor == null\r\n              ? RoundedRectangleBorder(\r\n                  borderRadius: BorderRadius.circular(widget.borderRadius),\r\n                )\r\n              : RoundedRectangleBorder(\r\n                  borderRadius: BorderRadius.zero,\r\n                  side: BorderSide(color: widget.borderColor!),\r\n                ),\r\n          // backgroundColor: Colors.red,\r\n          primary: widget.color,\r\n          elevation: widget.elevation,\r\n          padding: const EdgeInsets.all(0),\r\n        ),\r\n        onPressed: widget.onPressed == null ? null : _btnPressed,\r\n        child: childStream,\r\n      ),\r\n    );\r\n\r\n    return SizedBox(\r\n      height: widget.height,\r\n      child: Center(\r\n        child: _state.value == ButtonState.error\r\n            ? _cross\r\n            : _state.value == ButtonState.success\r\n                ? _check\r\n                : _btn,\r\n      ),\r\n    );\r\n  }\r\n\r\n  @override\r\n  void initState() {\r\n    super.initState();\r\n\r\n    _buttonController =\r\n        AnimationController(duration: widget.duration, vsync: this);\r\n\r\n    _checkButtonController =\r\n        AnimationController(duration: widget.completionDuration, vsync: this);\r\n\r\n    _borderController =\r\n        AnimationController(duration: widget._borderDuration, vsync: this);\r\n\r\n    _bounceAnimation = Tween<double>(begin: 0, end: widget.height).animate(\r\n      CurvedAnimation(\r\n        parent: _checkButtonController,\r\n        curve: widget.completionCurve,\r\n      ),\r\n    );\r\n    _bounceAnimation.addListener(() {\r\n      setState(() {});\r\n    });\r\n\r\n    _squeezeAnimation =\r\n        Tween<double>(begin: widget.width, end: widget.height).animate(\r\n      CurvedAnimation(parent: _buttonController, curve: widget.curve),\r\n    );\r\n\r\n    _squeezeAnimation.addListener(() {\r\n      setState(() {});\r\n    });\r\n\r\n    _squeezeAnimation.addStatusListener((state) {\r\n      if (state == AnimationStatus.completed && widget.animateOnTap) {\r\n        if (widget.onPressed != null) {\r\n          widget.onPressed!();\r\n        }\r\n      }\r\n    });\r\n\r\n    _borderAnimation = BorderRadiusTween(\r\n      begin: BorderRadius.circular(widget.borderRadius),\r\n      end: BorderRadius.circular(widget.height),\r\n    ).animate(_borderController);\r\n\r\n    _borderAnimation.addListener(() {\r\n      setState(() {});\r\n    });\r\n\r\n    // There is probably a better way of doing this...\r\n    _state.stream.listen((event) {\r\n      if (!mounted) return;\r\n      widget.controller._state.sink.add(event);\r\n    });\r\n\r\n    widget.controller._addListeners(_start, _stop, _success, _error, _reset);\r\n  }\r\n\r\n  @override\r\n  void dispose() {\r\n    _buttonController.dispose();\r\n    _checkButtonController.dispose();\r\n    _borderController.dispose();\r\n    _state.close();\r\n    super.dispose();\r\n  }\r\n\r\n  void _btnPressed() async {\r\n    if (widget.animateOnTap) {\r\n      _start();\r\n    } else {\r\n      if (widget.onPressed != null) {\r\n        widget.onPressed!();\r\n      }\r\n    }\r\n  }\r\n\r\n  void _start() {\r\n    if (!mounted) return;\r\n    _state.sink.add(ButtonState.loading);\r\n    _borderController.forward();\r\n    _buttonController.forward();\r\n    if (widget.resetAfterDuration) _reset();\r\n  }\r\n\r\n  void _stop() {\r\n    if (!mounted) return;\r\n    _state.sink.add(ButtonState.idle);\r\n    _buttonController.reverse();\r\n    _borderController.reverse();\r\n  }\r\n\r\n  void _success() {\r\n    if (!mounted) return;\r\n    _state.sink.add(ButtonState.success);\r\n    _checkButtonController.forward();\r\n  }\r\n\r\n  void _error() {\r\n    if (!mounted) return;\r\n    _state.sink.add(ButtonState.error);\r\n    _checkButtonController.forward();\r\n  }\r\n\r\n  void _reset() async {\r\n    if (widget.resetAfterDuration) await Future.delayed(widget.resetDuration);\r\n    if (!mounted) return;\r\n    _state.sink.add(ButtonState.idle);\r\n    unawaited(_buttonController.reverse());\r\n    unawaited(_borderController.reverse());\r\n    _checkButtonController.reset();\r\n  }\r\n}\r\n\r\n/// Options that can be chosen by the controller\r\n/// each will perform a unique animation\r\nclass RoundedLoadingButtonController {\r\n  VoidCallback? _startListener;\r\n  VoidCallback? _stopListener;\r\n  VoidCallback? _successListener;\r\n  VoidCallback? _errorListener;\r\n  VoidCallback? _resetListener;\r\n\r\n  void _addListeners(\r\n    VoidCallback startListener,\r\n    VoidCallback stopListener,\r\n    VoidCallback successListener,\r\n    VoidCallback errorListener,\r\n    VoidCallback resetListener,\r\n  ) {\r\n    _startListener = startListener;\r\n    _stopListener = stopListener;\r\n    _successListener = successListener;\r\n    _errorListener = errorListener;\r\n    _resetListener = resetListener;\r\n  }\r\n\r\n  final BehaviorSubject<ButtonState> _state =\r\n      BehaviorSubject<ButtonState>.seeded(ButtonState.idle);\r\n\r\n  /// A read-only stream of the button state\r\n  Stream<ButtonState> get stateStream => _state.stream;\r\n\r\n  /// Gets the current state\r\n  ButtonState? get currentState => _state.value;\r\n\r\n  /// Notify listeners to start the loading animation\r\n  void start() {\r\n    if (_startListener != null) _startListener!();\r\n  }\r\n\r\n  /// Notify listeners to start the stop animation\r\n  void stop() {\r\n    if (_stopListener != null) _stopListener!();\r\n  }\r\n\r\n  /// Notify listeners to start the success animation\r\n  void success() {\r\n    if (_successListener != null) _successListener!();\r\n  }\r\n\r\n  /// Notify listeners to start the error animation\r\n  void error() {\r\n    if (_errorListener != null) _errorListener!();\r\n  }\r\n\r\n  /// Notify listeners to start the reset animation\r\n  void reset() {\r\n    if (_resetListener != null) _resetListener!();\r\n  }\r\n}\r\n"
        }
    ]
}